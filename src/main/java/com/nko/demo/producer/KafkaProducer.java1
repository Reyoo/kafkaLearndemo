package com.nko.demo.producer;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.UUID;


/**
 * @author: nko-sun
 * @Date: 2019/4/17 10:57
 * @Description:
 * 生产者
 * 使用@EnableScheduling注解开启定时任务
 */
@Component
@EnableScheduling
@Slf4j
public class KafkaProducer {

    @Autowired
    private KafkaTemplate kafkaTemplate;
    @Autowired
    private KafkaSendResultHandler producerListener;


//    Producer<String,String> producer = new org.apache.kafka.clients.producer.KafkaProducer<String, String>()
    /**
     * 定时任务
     */
//    @Scheduled(cron = "00/2 * * * * ?")
//    @Transactional
//    public void send() {
//        String message = UUID.randomUUID().toString();
////        ListenableFuture future = kafkaTemplate.send("sunqi", message);
////        future.addCallback(o -> System.out.println("send-消息发送成功：" + message), throwable -> System.out.println("消息发送失败：" + message));
//        kafkaTemplate.setProducerListener(producerListener);
//        kafkaTemplate.send("testoffset1",2, System.currentTimeMillis(),"1" ,message);
//
//    }
//
//    @Scheduled(cron = "00/2 * * * * ?")
//    @Transactional
//    public void sends() {
//        String message = UUID.randomUUID().toString();
////        ListenableFuture future = kafkaTemplate.send("sunqi", message);
////        future.addCallback(o -> System.out.println("send-消息发送成功：" + message), throwable -> System.out.println("消息发送失败：" + message));
//        kafkaTemplate.setProducerListener(producerListener);
//        kafkaTemplate.send("testoffset1",1, System.currentTimeMillis(),"2" ,message);
//
//    }


    @Scheduled(cron = "00/2 * * * * ?")
    @Transactional
    public void sends0() {
        String message = UUID.randomUUID().toString();
//        ListenableFuture future = kafkaTemplate.send("sunqi", message);
//        future.addCallback(o -> System.out.println("send-消息发送成功：" + message), throwable -> System.out.println("消息发送失败：" + message));
        kafkaTemplate.setProducerListener(producerListener);
        kafkaTemplate.send("testoffset1",0, System.currentTimeMillis(),"zhangshan" ,message);

    }


//    @Bean
//    public Map<String, Object> consumerConfigs() {
//        Map<String, Object> propsMap = new HashMap<>();
//        propsMap.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, propsConfig.getBroker());
//        propsMap.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, propsConfig.getEnableAutoCommit());
//        propsMap.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, "100");
//        propsMap.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, "15000");
//        propsMap.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
//        propsMap.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
//        propsMap.put(ConsumerConfig.GROUP_ID_CONFIG, propsConfig.getGroupId());
//        propsMap.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, propsConfig.getAutoOffsetReset());
//        propsMap.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 50);
//        return propsMap;
//    }




//    public void testAutoCommit() throws Exception {
//        logger.info("Start auto");
//        ContainerProperties containerProps = new ContainerProperties("topic1", "topic2");
//        final CountDownLatch latch = new CountDownLatch(4);
//        containerProps.setMessageListener(new MessageListener<Integer, String>() {
//
//            @Override
//            public void onMessage(ConsumerRecord<Integer, String> message) {
//                logger.info("received: " + message);
//                latch.countDown();
//            }
//
//        });
//        KafkaMessageListenerContainer<Integer, String> container = createContainer(containerProps);
//        container.setBeanName("testAuto");
//        container.start();
//        Thread.sleep(1000); // wait a bit for the container to start
//        KafkaTemplate<Integer, String> template = createTemplate();
//        template.setDefaultTopic(topic1);
//        template.sendDefault(0, "foo");
//        template.sendDefault(2, "bar");
//        template.sendDefault(0, "baz");
//        template.sendDefault(2, "qux");
//        template.flush();
//        assertTrue(latch.await(60, TimeUnit.SECONDS));
//        container.stop();
//        logger.info("Stop auto");
//
//    }

}