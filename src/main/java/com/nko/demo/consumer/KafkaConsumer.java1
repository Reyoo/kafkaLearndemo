package com.nko.demo.consumer;


import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.annotation.PartitionOffset;
import org.springframework.kafka.annotation.TopicPartition;
import org.springframework.kafka.support.Acknowledgment;
import org.springframework.kafka.support.KafkaHeaders;
import org.springframework.messaging.handler.annotation.Header;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.List;
import java.util.Optional;


/**
 * @author: nko-sun
 * @Date: 2019/4/17 10:56
 * @Description:
 */
@Component
@Slf4j
public class KafkaConsumer {

//      自动提交
//    @KafkaListener(topics = {"sunqi"})
//    public void receiveMessage(String message){
//        System.out.println(message);
//    }


    //    @KafkaListener(id = "myContainer1",//id是消费者监听容器
//            topicPartitions =//配置topic和分区：监听两个topic，分别为topic1、topic2，topic1只接收分区0，3的消息，
//                    //topic2接收分区0和分区1的消息，但是分区1的消费者初始位置为5
//                    { @TopicPartition(topic = "topic1", partitions = { "0", "3" }),
//                            @TopicPartition(topic = "topic2", partitions = "0",
//                                    partitionOffsets = @PartitionOffset(partition = "1", initialOffset = "4"))
//                    })
//    @KafkaListener(id = "testoffset",//id是消费者监听容器
//            topicPartitions =//配置topic和分区：监听两个topic，分别为topic1、topic2，topic1只接收分区0，3的消息，
//                    //topic2接收分区0和分区1的消息，但是分区1的消费者初始位置为5
//                    {@TopicPartition(topic = "testoffset1", partitions = {"0"})
//                    })
//
//    public void listen(ConsumerRecord<?, ?> record ,Acknowledgment ack) {
//        Optional<?> kafkaMessage = Optional.ofNullable(record.value());
//
//        if (kafkaMessage.isPresent()) {
//            Object o = kafkaMessage.get();
//            log.info("---------------------record--1 = " + record);
//            log.info("---------------------message--1 = " + o);
//            //手动提交偏移量
//            ack.acknowledge();
//        }



//    }

        @KafkaListener(id = "ucp_consumer_group",//id是消费者监听容器
            topicPartitions =//配置topic和分区：监听两个topic，分别为topic1、topic2，topic1只接收分区0，3的消息，
                    //topic2接收分区0和分区1的消息，但是分区1的消费者初始位置为5
                    {@TopicPartition(topic = "ucpcluster_1", partitions = {"0","1","2"})
                    })
    public void annoListener(@Payload String data,
                             @Header(KafkaHeaders.RECEIVED_MESSAGE_KEY) String key,
                             @Header(KafkaHeaders.RECEIVED_PARTITION_ID) int partition,
                             @Header(KafkaHeaders.RECEIVED_TOPIC) String topic,
                             @Header(KafkaHeaders.RECEIVED_TIMESTAMP) long ts,Acknowledgment ack) {
        log.info("topic.quick.anno receive : \n"+
                "data : "+data+"\n"+
                "key : "+key+"\n"+
                "partitionId : "+partition+"\n"+
            "topic : "+topic+"\n"+
            "timestamp : "+ts+"\n"
            );
    //手动提交偏移量
//            ack.acknowledge();

}





}




