####################################yml 配置文件 适合应用 spring 2.4 版本以上 基础spring-kafka 的api
#server:
#  port: 8082
#
#
#spring:
#  kafka:
#    bootstrap-servers: 192.168.1.160:9092,192.168.1.161:9092,192.168.1.162:9092
#    consumer:
#      group-id: ucp_consumer_group
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      enable-auto-commit: false
#      auto-offset-reset: earliest
#      max-poll-records: 10
#      #心跳与消费者协调员之间的预期时间（以毫秒为单位），默认值为3000
#      heartbeat-interval: 3000
#      #client-id: demo2
#
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      batch-size: 65536
#      #生产者可用于缓冲等待发送到服务器的记录的内存总字节数，默认值为33554432
#      buffer-memory: 524288
#      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#      acks: all
#      retries: 10
#      #client-id: demo2
#      transaction-id-prefix: tx.
#    listener:
#      ack-mode: manual_immediate



#########################################运行原生的kafka api  包含事务及幂等##################################################

bootstrap.servers= 192.168.1.160:9092,192.168.1.161:9092,192.168.1.162:9092

#### kafka_producer_setting ####

kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#设置事务id
spring.kafka.producer.transactional.id= first-transactional
#设置幂等性
spring.kafka.producer.enable.idempotence = true
spring.kafka.producer.client-id= ucp170

#### kafka_comsumer_setting ####
spring.kafka.consumer.group-id= ucp170
spring.kafka.consumer.client-id=ucp170
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.isolation.level = read_committed
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.session.timeout.ms = 30000
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.apache.kafka.common.serialization.StringDeserializer

##### kafka topic#####
#设置kafka 本应用生产者的topic
kafka.local.topic = officeProduct170
#设置远端生产者的topic
kafka.distant.topic = officeProduct165


#partition 0 单张上传文件得操作
#partition 1 单张更新文件操作
#partition 2 单张删除文件操作